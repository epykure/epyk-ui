
import os
from epyk.core.js import JsUtils
from epyk.core.py import PyNpm


class Jupyter:

  def __init__(self, page):
    self.page = page

  @property
  def online(self):
    """
    Description:
    ------------
    Define the route for the external packages sources.

    TODO: Fix this to integrate it properly to Jupyter.
    """
    return self.page.imports.online

  @online.setter
  def online(self, flag):
    self.page.imports.online = flag
    if not flag:
      self.page.imports.static_url = "/static/components"# self.components_path

  def requireJs(self, jsFncs=None, verbose=False, excluded_packages=None):
    """
    Description:
    ------------
    Get the requirements generated by the page using requireJs package.
    This object can then be passed to the outs.jupyter() method in order to override the cell definition.

    Attributes:
    ----------
    :param jsFncs: List | String. Javascript functions.
    :param verbose: Boolean. Optional. Display version details (default False).
    :param excluded_packages: Optional.
    """
    results = self.page.outs._to_html_obj()
    importMng = self.page.imports
    if jsFncs is not None:
      results["jsFrgs"] = "%s;%s" % (JsUtils.jsConvertFncs(jsFncs, toStr=True), results["jsFrgs"])
    require_js = importMng.to_requireJs(
      results, excluded_packages or ['bootstrap', 'jquery', 'moment', 'jqueryui', 'mathjax'])
    if verbose:
      print(require_js)
    results['paths'] = "{%s}" % ", ".join(["%s: '%s'" % (k, p) for k, p in require_js['paths'].items()])
    results['jsFrgs_in_req'] = require_js['jsFrgs']
    return results

  def add_cell(self, html_code):
    pass

  def cut_cell(self, html_code):
    pass

  @property
  def built_in(self):
    """
    Description:
    ------------
    Get the list of external packages installed to the Jupyter instance.
    """
    return os.listdir(self.components_path)

  @property
  def components_path(self):
    """
    Description:
    ------------
    Get the path of the Jupyter external packages.
    """
    import notebook

    nb_path = os.path.split(notebook.__file__)[0]
    return os.path.join(nb_path, 'static', 'components')

  def update(self, package, version=None):
    pass

  def add(self, package, update=False, verbose=False):
    """
    Description:
    ------------

    Attributes:
    ----------
    :param package: List. Optional. A list of packages to download.
    :param update: Boolean, Optional. Flag to specify if the files need to be uploaded again.
    :param verbose: Boolean. Optional. Display version details (default True).
    """
    PyNpm.download(self.components_path, update=update, verbose=verbose, packages=[package])

  def install_packages(self, update=False, verbose=False):
    """
    Description:
    ------------

    Attributes:
    ----------
    :param update: Boolean, Optional. Flag to specify if the files need to be uploaded again.
    :param verbose: Boolean. Optional. Display version details (default True).
    """
    PyNpm.download(self.components_path, update=update, verbose=verbose, page=self.page)
